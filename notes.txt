

* begin() and end() pointer to iterator.
* thrust::device_vector<float> D(13)
# Thrust transformations:
# Functor example saxpy(s = a * x + y):
template <typename T>
struct saxpy_functor {
    const T a;
    saxpy_functor(T alpha): a(alpha) {};

    __host__ __device__
    T operator() (const T& x, const T& y) const {
        return a * x + y;
    }
}
thrust::transform(x.begin(), x.end(), y.begin(), y.begin(), saxpy_functor(alpha));

# Reductions:
    * parallel reduction produces a small output from a large input.

******** accessing device_vector from kernel? ***********
cast to pointers for passing to kernel.